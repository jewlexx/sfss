use std::{fs::File, io::Write};

const COLOURS: &[&str] = &[
    "black", "red", "green", "yellow", "blue", "magenta", "cyan", "white",
];

const COLOURS_TXT: &str = r#"
#[macro_export]
#[doc = concat!("Create a colored string with the `", stringify!(#ident), "` color.")]
macro_rules! #ident {
    ($($arg:tt)*) => {{
        console::style(format_args!($($arg)*)).#ident()
    }};
}

#[macro_export]
#[doc = concat!("Create a colored string with the `", stringify!(#ident_bright), "` color.")]
macro_rules! #ident_bright {
    ($($arg:tt)*) => {{
        $crate::output::colours::#ident!($($arg)*).bright()
    }};
}

#[macro_export]
#[doc = concat!("Print a colored string with the `", stringify!(#ident), "` color.")]
macro_rules! #println {
    ($($arg:tt)*) => {{
        println!("{}", $crate::output::colours::#ident!($($arg)*))
    }};
}

#[macro_export]
#[doc = concat!("Print a colored string with the `", stringify!(#ident_bright), "` color.")]
macro_rules! #println_bright {
    ($($arg:tt)*) => {{
        println!("{}", $crate::output::colours::#ident_bright!($($arg)*))
    }};
}

#[macro_export]
#[doc = concat!("Print a colored string to stderr with the `", stringify!(#ident), "` color.")]
macro_rules! #eprintln {
    ($($arg:tt)*) => {{
        eprintln!("{}", $crate::output::colours::#ident!($($arg)*))
    }};
}

#[macro_export]
#[doc = concat!("Print a colored string to stderr with the `", stringify!(#ident_bright), "` color.")]
macro_rules! #eprintln_bright {
    ($($arg:tt)*) => {{
        eprintln!("{}", $crate::output::colours::#ident_bright!($($arg)*))
    }};
}

pub use #ident;
pub use #ident_bright;
pub use #println;
pub use #println_bright;
pub use #eprintln;
pub use #eprintln_bright;
"#;

pub struct Colours;

impl Colours {
    pub fn hook(mut file: &File) -> std::io::Result<()> {
        writeln!(file, "pub mod colours {{")?;
        writeln!(file, "#![allow(unused_imports)]")?;
        writeln!(file, "// This file is autogenerated")?;

        for colour in COLOURS {
            let output = COLOURS_TXT
                .replace("#ident_bright", &format!("bright_{colour}"))
                .replace("#ident", colour)
                .replace("#eprintln_bright", &format!("eprintln_bright_{colour}"))
                .replace("#eprintln", &format!("eprintln_{colour}"))
                .replace("#println_bright", &format!("println_bright_{colour}"))
                .replace("#println", &format!("println_{colour}"));

            file.write_all(output.as_bytes())?;
        }

        writeln!(file, "}}")?;

        Ok(())
    }
}
