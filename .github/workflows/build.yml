name: Build & Test

on:
  release:
    types: [published]

  pull_request:
    branches:
      - "trunk"

  push:
    branches:
      - "trunk"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  CONTRIBUTORS_TOKEN: ${{ secrets.CONTRIBUTORS_TOKEN }}
  IS_CI: true
  IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/') }}

jobs:
  cargo-deny:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2

  clippy:
    name: Clippy
    runs-on: windows-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2.7.3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install required crates
        run: cargo install clippy-sarif sarif-fmt

      - name: Run rust-clippy
        run: cargo clippy
          --all-features
          --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true

  format:
    name: Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check Formatting
        run: cargo fmt --all --check

  test:
    name: Test
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2.7.3

      - name: Install and setup Scoop
        uses: MinoruSekine/setup-scoop@v4
        with:
          buckets: extras java

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build and Test
        run: cargo test --all --features beta

  build:
    name: Build
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2.7.3
      - uses: extractions/setup-just@v2

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Debug build
        run: cargo b --all --features beta

  publish:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    name: Publish
    runs-on: windows-latest
    needs: [cargo-deny, build, test, clippy, format]

    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v2

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build and Package
        if: ${{ !github.event.release.prerelease }}
        run: just release-all

      - name: Beta Build and Package
        if: ${{ github.event.release.prerelease }}
        run: just beta-release-all

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: package.zip
          path: release/*

      - name: Upload & Publish
        uses: softprops/action-gh-release@v2.0.4
        with:
          files: |
            release/*.exe
            release/*.exe.sha256

      - name: VirusTotal Scan
        uses: crazy-max/ghaction-virustotal@v4
        with:
          update_release_body: true
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: |
            .exe$
